Model, MAE, MSE, RMSE, GAME4, GAME16, PSNR, SSIM
CSRNet-SHA, 589.7383, 860263.3099, 589.7383, 617.0222, 639.1082, 55.1974, 0.9836
CSRNet-SHB, 1124.9318, 2021878.7140, 1124.9318, 1124.9655, 1125.3782, 52.7332, 0.9720
Bay-SHA, 528.8997, 742242.9525, 528.8997, 554.6999, 578.8141, 56.4153, 0.9849
Bay-SHB, 1219.7110, 2328464.6329, 1219.7110, 1221.9852, 1222.2742, 51.8106, 0.9679
Bay-QNRF, 612.9501, 843157.4156, 612.9501, 633.7644, 657.8205, 55.1909, 0.9811
DM-Count-SHA, 536.3985, 718097.0817, 536.3985, 568.6539, 601.5511, 54.1471, 0.9814
DM-Count-SHB, 1184.5086, 2241493.1260, 1184.5086, 1184.5086, 1184.6940, 51.3117, 0.9678
DM-Count-QNRF, 468.2744, 461875.9169, 468.2744, 503.5936, 540.1029, 53.7204, 0.9826
SFANet-SHB, 1145.0595, 2247287.0663, 1145.0595, 1146.3026, 1149.8768, 51.8694, 0.9702
SASNet-SHA, 480.5547, 619694.0537, 480.5547, 511.6908, 535.1027, 54.0781, 0.9848
SASNet-SHB, 1195.4537, 2258849.4492, 1195.4537, 1195.4538, 1196.8268, 51.7588, 0.9683

def calculate_game(self, gt_den, pred_den, blocks=4):
    result = 0  # Aggregation of errors per block (mean is calculated afterwards)
    gt_den = self.split_matrix(gt_den, blocks=blocks)
    pred_den = self.split_matrix(pred_den, blocks=blocks)
    for i, (gden, pden) in enumerate(zip(gt_den, pred_den), start=1):
      block_result = abs(np.sum(pden) - np.sum(gden))
      result += block_result
    if math.isnan(result):
      ipdb.set_trace()
    return result

 T, B = np.array_split(matrix, 2)
      TL, TR = np.array_split(T, 2, axis=1)
      BL, BR = np.array_split(B, 2, axis=1)